{
  "id": "coding_2025-03-17T17-05-54.597944",
  "timestamp": "2025-03-17T17:05:54.597944",
  "type": "coding",
  "topic": "Linear Regression",
  "intensity": 0,
  "implementation_type": "From Scratch",
  "code": "# Import libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Set the seed for reproducibility\nnp.random.seed(0)\n\n# Define a function to generate random data\ndef generate_data():\n    \"\"\"\n    Generate 1000 pairs of features and target values.\n    \n    Returns:\n        X (list): Features\n        y (list): Target values\n    \"\"\"\n    n_samples = 1000\n    X = np.random.rand(n_samples, 4)  # 4 features\n    y = 13 + 2.5 * X[:, 0] - 1.8 * X[:, 1] + 0.02 * X[:, 2] - 0.01 * X[:, 3]\n\n    return X, y\n\n# Generate data\nX, y = generate_data()\n\nprint(\"Data shape:\", X.shape, y.shape)\n\n# Split the data into training and testing sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nprint(\"Training set shape:\", X_train.shape, y_train.shape)\nprint(\"Testing set shape:\", X_test.shape, y_test.shape)\n\n# Implement linear regression from scratch\ndef linear_regression(X_train, y_train):\n    \"\"\"\n    Simple linear regression implementation.\n    \n    Args:\n        X_train (numpy.array): Features of the training set\n        y_train (numpy.array): Target values of the training set\n    \n    Returns:\n        w (float): Coefficient for the linear equation\n        b (float): Intercept for the linear equation\n    \"\"\"\n    # Calculate the mean of X and y\n    mean_x = np.mean(X_train, axis=0)\n    mean_y = np.mean(y_train)\n\n    # Calculate the slope (\u03b21) and intercept (\u03b20) using the normal equation\n    beta1 = np.sum((X_train - mean_x) * (y_train - mean_y)) / np.sum((X_train - mean_x) ** 2)\n    beta0 = mean_y - beta1 * mean_x\n\n    return beta1, beta0\n\n# Perform linear regression\nw, b = linear_regression(X_train, y_train)\n\nprint(\"Coefficient (\u03b21):\", w)\nprint(\"Intercept (\u03b20):\", b)\n\n# Predict values using the trained model\ndef predict(y_train, X_test):\n    \"\"\"\n    Predict target values using a simple linear regression model.\n    \n    Args:\n        y_train (numpy.array): Target values of the training set\n        X_test (numpy.array): Features of the testing set\n    \n    Returns:\n        predictions (numpy.array): Predicted target values\n    \"\"\"\n    return np.sum(X_test * w, axis=0)\n\n# Make predictions on the test set\npredictions = predict(y_train, X_test)\n\nprint(\"Predictions:\", predictions)\n",
  "execution_success": false
}
